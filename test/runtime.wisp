(import [dictionary? vector? subs str
         = == > >= < <= + - / *] "../src/runtime")
(import [list concat] "../src/sequence")
(import [equivalent?] "./utils")


(.log console "test dictionary?")

(assert (not (dictionary? 2)) "2 is not dictionary")
(assert (not (dictionary? [])) "[] is not dictionary")
(assert (not (dictionary? '())) "() is not dictionary")
(assert (dictionary? {}) "{} is dictionary")

(.log console "test vector?")

(assert (not (vector? 2)) "2 is not vector")
(assert (not (vector? {})) "{} is not vector")
(assert (not (vector? '())) "() is not vector")
(assert (vector? []) "[] is vector")

(assert (equivalent?
          '(1 2 3 4 5)
          `(1 ~@'(2 3) 4 ~@'(5))))

(.log console "subs")

(assert (= "lojure" (subs "Clojure" 1)))
(assert (= "lo" (subs "Clojure" 1 3)))

(.log console "special functions")

(assert (apply = [1]))
(assert (apply = [1 1]))
(assert (not (apply = [1 2])))
(assert (apply = [1 1 1]))
(assert (not (apply = [1 2 3])))
(assert (apply = [1 1 1 1 1 1]))
(assert (not (apply = [1 1 1 1 2 1])))

(assert (apply == [1]))
(assert (apply == [1 1]))
(assert (not (apply == [1 2])))
(assert (apply == [1 1 1]))
(assert (not (apply == [1 2 3])))
(assert (apply == [1 1 1 1 1 1]))
(assert (not (apply == [1 1 1 1 2 1])))

(assert (apply > [1]))
(assert (apply > [2 1]))
(assert (not (apply > [1 2])))
(assert (not (apply > [1 1])))
(assert (apply > [3 2 1]))
(assert (not (apply > [3 2 4])))
(assert (not (apply > [3 2 2])))
(assert (apply > [5 4 3 2 1 0]))
(assert (not (apply > [5 4 3 2 2 1])))
(assert (not (apply > [5 4 3 2 3 1])))

(assert (apply >= [1]))
(assert (apply >= [2 1]))
(assert (apply >= [2 2]))
(assert (not (apply >= [1 2])))
(assert (apply >= [3 2 1]))
(assert (apply >= [3 2 2]))
(assert (not (apply >= [3 2 4])))
(assert (apply >= [5 4 3 2 2 1 0]))
(assert (not (apply >= [5 4 3 2 0 1])))

(assert (apply < [1]))
(assert (apply < [1 2]))
(assert (not (apply < [2 1])))
(assert (not (apply < [2 2])))
(assert (apply < [1 2 3]))
(assert (not (apply < [3 2 4])))
(assert (not (apply < [3 4 4])))
(assert (apply < [0 1 2 3 4 5]))
(assert (not (apply < [0 1 2 3 4 4])))
(assert (not (apply < [0 1 2 1 4 5])))

(assert (apply <= [1]))
(assert (apply <= [1 2]))
(assert (apply <= [2 2]))
(assert (not (apply <= [2 1])))
(assert (apply <= [1 2 3]))
(assert (apply <= [1 2 2]))
(assert (not (apply <= [4 5 3])))
(assert (apply <= [0 1 2 3 4 5]))
(assert (apply <= [0 1 2 3 4 4]))
(assert (not (apply <= [0 1 2 1 4 5])))

(assert (= 0 (apply + [])))
(assert (= 1 (apply + [1])))
(assert (= 3 (apply + [1 2])))
(assert (= 6 (apply + [1 2 3])))
(assert (= 21 (apply + [1 2 3 4 5 6])))

(assert (= -1 (apply - [1])))
(assert (= 3 (apply - [5 2])))
(assert (= 5 (apply - [10 2 3])))
(assert (= 9 (apply - [30 1 2 3 4 5 6])))

(assert (= 1 (apply * [])))
(assert (= 5 (apply * [5])))
(assert (= 4 (apply * [2 2])))
(assert (= 6 (apply * [1 2 3])))
(assert (= 720 (apply * [1 2 3 4 5 6])))

(assert (= 1 (apply / [1])))
(assert (= 1/2 (apply / [2])))
(assert (= 5/2 (apply / [5 2])))
(assert (= 3 (apply / [6 2])))
(assert (= 5/3 (apply / [10 2 3])))
(assert (= 1/24 (apply / [30 1 2 3 4 5 6])))
